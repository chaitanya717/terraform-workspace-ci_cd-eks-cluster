properties([
    parameters([
        string(defaultValue: 'vdev.tfvars', description: 'Specify the file name', name: 'File-Name'),
        choice(choices: ['apply', 'destroy'], description: 'Select Terraform action', name: 'Terraform-Action'),
        choice(choices: ['dev', 'stage', 'prod'], description: 'Select Terraform workspace', name: 'Terraform-workspace')
    ])
])

pipeline {
    agent any
    stages {
        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/chaitanya717/terraform-workspace-ci_cd-eks-cluster.git'
            }
        }
        
        stage('Initializing Terraform') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws-key'
                ]]) {
                    dir('terraform/vpc_with_Jenkins_server') {
                        script {
                            sh 'terraform init -reconfigure'
                        }
                    }
                }
            }
        }
        
        stage('Check or Create Workspace') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws-key'
                ]]) {
                    dir('terraform/vpc_with_Jenkins_server') {
                        script {
                            sh """
                                terraform workspace select ${params.'Terraform-workspace'} || \
                                terraform workspace new ${params.'Terraform-workspace'}
                            """
                        }
                    }
                }
            }
        }

        stage('Validate Terraform Code') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws-key'
                ]]) {
                    dir('terraform/vpc_with_Jenkins_server') {
                        script {
                            sh 'terraform validate'
                        }
                    }
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws-key'
                ]]) {
                    dir('terraform/vpc_with_Jenkins_server') {
                        script {
                            sh "terraform plan -var-file=${params.'File-Name'}"
                        }
                    }
                }
            }
        }

        // Uncomment this stage when you're ready to perform the action
        /*
        stage('Terraform Action') {
            steps {
                withAWS(credentials: 'aws-key', region: 'us-east-1') { 
                    script {
                        echo "${params.'Terraform-Action'}"
                        dir('terraform/vpc_with_Jenkins_server') {
                            script {
                                if (params.'Terraform-Action' == 'apply') {
                                    sh "terraform apply -auto-approve -var-file=${params.'File-Name'}"
                                } else if (params.'Terraform-Action' == 'destroy') {
                                    sh "terraform destroy -auto-approve -var-file=${params.'File-Name'}"
                                } else {
                                    error "Invalid value for Terraform-Action: ${params.'Terraform-Action'}"
                                }
                            }
                        }
                    }
                }
            }
        }
        */
    }
}
